const puppeteer = require('puppeteer');

async function scrape() {
  const browser = await puppeteer.launch({ headless: false });
  const page = await browser.newPage();

  // Configura o cabeçalho para simular uma solicitação de navegador
  await page.setExtraHTTPHeaders({
    'User-Agent': 'Mozilla/5.0'
  });

  // Navega até a página desejada
  await page.goto('https://www.zapimoveis.com.br/venda/imoveis/es+guarapari/?transacao=venda&onde=,Esp%C3%ADrito%20Santo,Guarapari,,,,,city,BR%3EEspirito%20Santo%3ENULL%3EGuarapari,-20.673893,-40.499984,&itl_id=1000072&itl_name=zap_-_botao-cta_buscar_to_zap_resultado-pesquisa');

  // Função para rolar a página até o final
  async function autoScroll(page) {
    await page.evaluate(async () => {
      await new Promise((resolve) => {
        let totalHeight = 0;
        const distance = 100;
        const timer = setInterval(() => {
          const scrollHeight = document.body.scrollHeight;
          window.scrollBy(0, distance);
          totalHeight += distance;

          console.log('Scrolling:', totalHeight, 'of', scrollHeight); // Log progress

          if (totalHeight >= scrollHeight) {
            clearInterval(timer);
            resolve();
          }
        }, 100);
      });
    });
  }

  // Função para criar uma espera explícita
  function waitForTimeout(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // Função para coletar dados da página atual
  async function collectData(page) {
    // Rola a página para baixo para carregar todos os elementos
    console.log('Iniciando autoScroll para coletar dados da página'); // Log scroll start
    await autoScroll(page);
    console.log('autoScroll concluído'); // Log scroll end

    // Espera 2 segundos adicionais para garantir que todos os elementos sejam carregados
    await waitForTimeout(2000);

    // Obtém todos os preços dos imóveis
    const prices = await page.evaluate(() => {
      const priceElements = document.querySelectorAll('div.listing-price');
      return Array.from(priceElements, priceElement => priceElement.textContent.trim());
    });

    return prices;
  }

  let allPrices = [];

  // Loop para navegar pelas páginas e coletar os dados
  while (true) {
    // Aguarda até que a página esteja completamente carregada
    await page.waitForSelector('body');

    // Imprime o URL da página atual
    console.log('URL atual:', page.url());

    // Coleta os dados da página atual
    const prices = await collectData(page);
    allPrices = allPrices.concat(prices);

    // Tenta clicar no botão "Próxima página"
    const nextPageButton = await page.$('button[aria-label="Próxima página"]');
    if (nextPageButton) {
      console.log('Clicando no botão "Próxima página"');
      await Promise.all([
        nextPageButton.click(),
        page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 60000 }) // 60 segundos
      ]);

      // Espera a próxima página carregar completamente
      await page.waitForSelector('body');

      // Executa o scroll automático na nova página
      console.log('Executando autoScroll na nova página');
      await autoScroll(page);
      console.log('autoScroll na nova página concluído');
    } else {
      console.log('Botão "Próxima página" não encontrado, terminando a raspagem');
      break; // Sai do loop se o botão "Próxima página" não estiver presente
    }
  }

  // Imprime os preços dos imóveis
  console.log('Preços dos imóveis:', allPrices);

  // Fecha o navegador
  await browser.close();
}

// Chama a função para iniciar a raspagem
scrape();
